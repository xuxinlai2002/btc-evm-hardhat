/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface BTCVaultServiceEnInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDePreImage"
      | "getEnPreImage"
      | "ripemd160Test"
      | "setPreImage"
      | "sha256Test"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDePreImage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnPreImage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ripemd160Test",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreImage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Test",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDePreImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnPreImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ripemd160Test",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Test", data: BytesLike): Result;
}

export interface BTCVaultServiceEn extends BaseContract {
  connect(runner?: ContractRunner | null): BTCVaultServiceEn;
  waitForDeployment(): Promise<this>;

  interface: BTCVaultServiceEnInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDePreImage: TypedContractMethod<[], [bigint], "view">;

  getEnPreImage: TypedContractMethod<[], [bigint], "view">;

  ripemd160Test: TypedContractMethod<[_data: BytesLike], [string], "view">;

  setPreImage: TypedContractMethod<[_rawData: BytesLike], [void], "nonpayable">;

  sha256Test: TypedContractMethod<[_data: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDePreImage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEnPreImage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ripemd160Test"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setPreImage"
  ): TypedContractMethod<[_rawData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sha256Test"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;

  filters: {};
}
