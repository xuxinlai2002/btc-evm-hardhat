/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace BTCVaultService {
  export type OptionDataStruct = {
    coinType: BigNumberish;
    strikePrice: BigNumberish;
    stakingDuration: BigNumberish;
    lockTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    nonce: BigNumberish;
    preImageHash: BytesLike;
    owner: AddressLike;
    status: BigNumberish;
  };

  export type OptionDataStructOutput = [
    coinType: bigint,
    strikePrice: bigint,
    stakingDuration: bigint,
    lockTimestamp: bigint,
    endTimestamp: bigint,
    nonce: bigint,
    preImageHash: string,
    owner: string,
    status: bigint
  ] & {
    coinType: bigint;
    strikePrice: bigint;
    stakingDuration: bigint;
    lockTimestamp: bigint;
    endTimestamp: bigint;
    nonce: bigint;
    preImageHash: string;
    owner: string;
    status: bigint;
  };
}

export interface BTCVaultServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "generateRandoms"
      | "getOptionData"
      | "ripemd160Test"
      | "setOptionData"
      | "sha256Test"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "generateRandoms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ripemd160Test",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionData",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Test",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateRandoms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ripemd160Test",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Test", data: BytesLike): Result;
}

export interface BTCVaultService extends BaseContract {
  connect(runner?: ContractRunner | null): BTCVaultService;
  waitForDeployment(): Promise<this>;

  interface: BTCVaultServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateRandoms: TypedContractMethod<
    [count: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOptionData: TypedContractMethod<
    [nonce: BigNumberish],
    [BTCVaultService.OptionDataStructOutput],
    "view"
  >;

  ripemd160Test: TypedContractMethod<[_data: BytesLike], [string], "view">;

  setOptionData: TypedContractMethod<
    [
      coinType: BigNumberish,
      strikePrice: BigNumberish,
      stakingDuration: BigNumberish,
      lockTimestamp: BigNumberish,
      endTimestamp: BigNumberish
    ],
    [[bigint, string]],
    "nonpayable"
  >;

  sha256Test: TypedContractMethod<[_data: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateRandoms"
  ): TypedContractMethod<[count: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOptionData"
  ): TypedContractMethod<
    [nonce: BigNumberish],
    [BTCVaultService.OptionDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ripemd160Test"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setOptionData"
  ): TypedContractMethod<
    [
      coinType: BigNumberish,
      strikePrice: BigNumberish,
      stakingDuration: BigNumberish,
      lockTimestamp: BigNumberish,
      endTimestamp: BigNumberish
    ],
    [[bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sha256Test"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;

  filters: {};
}
